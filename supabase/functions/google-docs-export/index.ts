
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.38.4";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    // Create a Supabase client
    const supabaseUrl = Deno.env.get("SUPABASE_URL") || "";
    const supabaseServiceKey = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY") || "";
    const supabase = createClient(supabaseUrl, supabaseServiceKey);

    // Get the authorization header from the request
    const authHeader = req.headers.get('Authorization');
    if (!authHeader) {
      throw new Error('Missing Authorization header');
    }

    // Get the user from the request
    const { data: { user }, error: userError } = await supabase.auth.getUser(
      authHeader.replace('Bearer ', '')
    );

    if (userError || !user) {
      throw new Error(userError?.message || 'User not authenticated');
    }

    // Get the request body
    const { query, consensusResponse } = await req.json();
    if (!query || !consensusResponse) {
      throw new Error('Missing required fields: query and/or consensusResponse');
    }

    // Get the user's access token from auth metadata to make Google API calls
    const accessToken = user.app_metadata?.provider_token || null;
    if (!accessToken) {
      throw new Error('Google access token not available. Please sign in again with Google.');
    }

    // Create a Google Doc
    const docResponse = await fetch('https://docs.googleapis.com/v1/documents', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${accessToken}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        title: `AI Consensus: ${query.substring(0, 50)}${query.length > 50 ? '...' : ''}`,
      }),
    });

    if (!docResponse.ok) {
      const errorData = await docResponse.json();
      console.error('Google Docs API error:', errorData);
      throw new Error(`Failed to create Google Doc: ${errorData.error?.message || docResponse.statusText}`);
    }

    const docData = await docResponse.json();
    const documentId = docData.documentId;

    // Format content for Google Docs
    const timestamp = new Date().toLocaleString();
    const content = [
      { text: "AI Consensus Report\n\n", bold: true, size: 16 },
      { text: `Query: ${query}\n\n`, bold: true },
      { text: `Generated on: ${timestamp}\n\n`, italic: true },
      { text: "Consensus Response:\n", bold: true },
      { text: `${consensusResponse}\n\n` },
      { text: "Generated by Truthful AI Consensus Engine", italic: true, size: 8 },
    ];

    // Prepare batch update requests
    const requests = content.map(item => {
      return {
        insertText: {
          location: {
            index: 1, // Always insert at the beginning of the document
          },
          text: item.text,
        },
      };
    });

    // Update the document with content
    const updateResponse = await fetch(`https://docs.googleapis.com/v1/documents/${documentId}:batchUpdate`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${accessToken}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        requests,
      }),
    });

    if (!updateResponse.ok) {
      const errorData = await updateResponse.json();
      console.error('Google Docs update API error:', errorData);
      throw new Error(`Failed to update Google Doc: ${errorData.error?.message || updateResponse.statusText}`);
    }

    // Return the document URL
    const documentUrl = `https://docs.google.com/document/d/${documentId}/edit`;
    
    // Record the export action in the database
    const { error: dbError } = await supabase
      .from('consensus_responses')
      .update({ 
        exported_to_gdocs: true,
        gdocs_document_id: documentId
      })
      .eq('user_id', user.id)
      .eq('query', query);
    
    if (dbError) {
      console.error('Error recording export action:', dbError);
    }

    return new Response(
      JSON.stringify({ 
        success: true, 
        message: 'Successfully exported to Google Docs', 
        documentId, 
        documentUrl 
      }),
      { 
        headers: { 
          ...corsHeaders,
          'Content-Type': 'application/json' 
        } 
      }
    );
  } catch (error) {
    console.error('Error in google-docs-export function:', error);
    
    return new Response(
      JSON.stringify({ 
        success: false, 
        error: error.message || 'Failed to export to Google Docs'
      }),
      { 
        status: 500,
        headers: { 
          ...corsHeaders,
          'Content-Type': 'application/json' 
        } 
      }
    );
  }
});
